package ryver.app.testclient;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.Response;
import net.minidev.json.JSONObject;

import static io.restassured.config.RedirectConfig.redirectConfig;
import static io.restassured.RestAssured.*;

@TestMethodOrder(OrderAnnotation.class)
public class B_ContentTest {
    /**
     *  Content item info:
        {
            "id": (auto-generated by your api, int value),
            "title":"The title of the advisory or news",
            "summary":"The short summary of the content item",
            "content": "The text of the content item",
            "link":"https://link.to.externalcontent",
            "approved": true (or false)
        }
     */

    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    private String createContentRequestBody(String[] content, boolean approved){
        JSONObject requestParams = new JSONObject();
        requestParams.put("title", content[0]); 
        requestParams.put("summary", content[1]);
        requestParams.put("content", content[2]);
        requestParams.put("link",  content[3]);
        requestParams.put("approved",  approved);

        return requestParams.toJSONString();
    }

    private Response createContent(String content, String username, String password){
        return given().auth().basic(username, password)
                .accept("*/*").contentType("application/json")
                .body(content).post(TestConstants.contentURL)
                .then().extract().response();
    }

    private void assertContent(String[] expected, Response actual, boolean approved){
        assertEquals(expected[0], actual.jsonPath().getString("title"));
        assertEquals(expected[1], actual.jsonPath().getString("summary"));
        assertEquals(expected[2], actual.jsonPath().getString("content"));
        assertEquals(expected[3], actual.jsonPath().getString("link"));
        assertEquals(approved, actual.jsonPath().getBoolean("approved"));
    }

    private Response updateContent(int id, String content, String username, String password){
        return given().auth().basic(username, password)
                .accept("*/*").contentType("application/json")
                .body(content).put(TestConstants.contentURL + "/" + id)
                .then().extract().response();
    }

    private Response getContent(int id, String username, String password){
        return  given().auth().basic(username, password)
        .accept("*/*").contentType("application/json")
        .get(TestConstants.contentURL + "/" + id)
        .then().extract().response();
    }

    /**
     * Test add/approve/get content successfully
     * @throws Exception
     */
    @Test
    @Order(1)
    public void testAddContent_Success() throws Exception{
        // add news or advisory by analyst, need approval from manager to be visible to users
        // any value set by analysts for "approved" would be ignored
        // its default value is false 
        String[] content = {"The title", "The summary", "The content", "https://article.com/article1"};
        Response response = createContent(createContentRequestBody(content, true), TestConstants.a1_USERNAME, TestConstants.a1_PASSWORD);
        assertEquals(201, response.getStatusCode());
        assertContent(content, response, false);
        
        // view by user - not found as the article is not approved yet
        int id = response.jsonPath().getInt("id");
        response = getContent(id, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(404, response.getStatusCode());

        // updated and approved by manager - note the put request
        String[] update = {"The updated title", "The updated summary", "The updated content", "https://article.com/article1"};
        response = updateContent(id, createContentRequestBody(update, true), TestConstants.m_USERNAME, TestConstants.m_PASSWORD);
        assertEquals(200, response.getStatusCode());
        assertContent(update, response, true);
        
        // view by user - successful now
        response = getContent(id, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(200, response.getStatusCode());
    }

    @Test
    @Order(2)
    public void testDeleteContent_Success() throws Exception{
        String[] content = {"The 2nd title", "The 2nd summary", "The 2nd content", "https://article.com/article2"};
        Response response = createContent(createContentRequestBody(content, false), TestConstants.a1_USERNAME, TestConstants.a1_PASSWORD);
        assertEquals(201, response.getStatusCode());
        assertContent(content, response, false);
        
        // updated and approved by manager
        int id = response.jsonPath().getInt("id");
        String[] update = {"The 2nd updated title", "The 2nd updated summary", "The 2nd updated content", "https://article.com/article1"};
        response = updateContent(id, createContentRequestBody(update, true), TestConstants.m_USERNAME, TestConstants.m_PASSWORD);
        assertEquals(200, response.getStatusCode());
        assertContent(update, response, true);
        
        // view by user - successful now
        response = getContent(id, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(200, response.getStatusCode());

        // delete by analyst2
        given().auth().basic(TestConstants.a2_USERNAME, TestConstants.a2_PASSWORD)
                .accept("*/*").contentType("application/json").delete(TestConstants.contentURL + "/" + id).then().statusCode(200);
            
        // view by user - not found
        response = getContent(id, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(404, response.getStatusCode());
    }
}

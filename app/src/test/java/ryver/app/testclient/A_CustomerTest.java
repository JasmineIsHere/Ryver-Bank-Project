package ryver.app.testclient;


import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.Response;
import net.minidev.json.JSONObject;
import static io.restassured.config.RedirectConfig.redirectConfig;

import static io.restassured.RestAssured.*;

@TestMethodOrder(OrderAnnotation.class)
public class A_CustomerTest {
    /**
        Customer info (in JSON):
        {
            "id": (auto-generated by your api, int value),
            "full_name":"Mark Tan",
            "nric":"S8529649C", (valid nric number starting with S or T and valid checksum)
            "phone":"91251234", (valid SG phone - 8 digits starting with 6, 8 or 9)
            "address":"27 Jalan Alamak S680234", (string, no need validation)
            "username":"gooduser",
            "password":"password" (need to hash password),
            "authorities":"ROLE_USER",
            "active": true (or false: to indicate if the customer account is in use)
        }
     * 
     */
    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    private String nric1 = "S8529649C";
    private String nric2 = "S8097316J";
    private String nric_invalid = "S5296491C";

    /**
     * Utility methods
     */
    private String createUserRequestBody(String[] user, boolean active) {
        JSONObject requestParams = new JSONObject();
        requestParams.put("full_name", user[0]); 
        // nric must be unique and follow the Singapore NRIC format
        requestParams.put("nric", user[1]);
        // valid Singapore number
        requestParams.put("phone", user[2]);
        requestParams.put("address", user[3]);
        // unique username
        requestParams.put("username", user[4]);
        requestParams.put("password", user[5]);
        requestParams.put("authorities", "ROLE_USER");
        requestParams.put("active", active);
        return requestParams.toJSONString();
    }
    private Response createUser(String request){
        return given().auth().basic(TestConstants.m_USERNAME, TestConstants.m_PASSWORD)
                .accept("*/*").contentType("application/json").body(request)
                .post(TestConstants.customerURL)
                .then().extract().response();
    }
    private Response updateUser(int id, String request, String username, String password){
        return given().auth().basic(username, password)
                .accept("*/*").contentType("application/json").body(request)
                .put(TestConstants.customerURL + "/" + id)
                .then().extract().response();
    }
    private void assertUser(String[] expected, Response actual){
        assertEquals(expected[2], actual.jsonPath().getString("phone"));
        assertEquals(expected[3], actual.jsonPath().getString("address"));
        assertEquals(expected[4], actual.jsonPath().getString("username"));
    }
    private Response getUser(int id, String username, String password) {
        return given().auth().basic(username, password)
                .accept("*/*").contentType("application/json")
                .get(TestConstants.customerURL + "/" + id)
                .then().extract().response();
    }

     /**
     * Add the 1st user successfully.
     * @throws Exception
     */
    @Test
    @Order(1)
    public void testAddUser_Success() throws Exception{
        ////////////////////////////////// add user 1
        String[] user1 = {"Mark Tan", nric1, "93223235", "27 Jalan Alamak S680234", TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD};
        Response userInfo = createUser(createUserRequestBody(user1, true));
        assertEquals(201, userInfo.getStatusCode());
        assertUser(user1, userInfo);
        TestConstants.user_id_1 = userInfo.jsonPath().getInt("id");

        // view by this user - successful
        userInfo = getUser(TestConstants.user_id_1, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
        assertUser(user1, userInfo);

        /////////////////////////////////// add user2
        String[] user2 = {"John Tan", nric2, "93223435", "28 Jalan Alamak S680234", TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD};
        userInfo = createUser(createUserRequestBody(user2, true));
        assertEquals(201, userInfo.getStatusCode());
        assertUser(user2, userInfo);
        TestConstants.user_id_2 = userInfo.jsonPath().getInt("id");

        // view - unsuccessful 401
        userInfo = getUser(TestConstants.user_id_2, "pass", "word");
        assertEquals(401, userInfo.getStatusCode());
        
        // view - unsuccessful 403
        userInfo = getUser(TestConstants.user_id_2, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(403, userInfo.getStatusCode());
        
        userInfo = getUser(TestConstants.user_id_2, TestConstants.a2_USERNAME, TestConstants.a2_PASSWORD);
        assertEquals(403, userInfo.getStatusCode());

        // view - successful 200
        userInfo = getUser(TestConstants.user_id_2, TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
        assertUser(user2, userInfo);
    }

    /**
     * Test add user with invalid data, e.g., invalid nric or phone
     * Return 400 - bad request
     * @throws Exception
     */
    @Test
    @Order(2)
    public void testAddUser_InvalidNric() throws Exception{
        String[] user = {"John Tan", nric_invalid, "67882345", "28 Jalan Alamak S680234", "user", "pass"};
        Response userInfo = createUser(createUserRequestBody(user, true));
        assertEquals(400, userInfo.getStatusCode());
    }

    @Test
    @Order(3)
    public void testAddUser_InvalidPhone() throws Exception{
        String[] user = {"John Tan", "S5042165A", "782345", "28 Jalan Alamak S680234", "user", "pass"};
        Response userInfo = createUser(createUserRequestBody(user, true));
        assertEquals(400, userInfo.getStatusCode());
    }
    
    /**
     * Conflict can happen by nric or username.
     * @throws Exception
     */
    @Test
    @Order(4)
    public void testAddUser_Conflict() throws Exception{
        String[] user = {"John Tan", nric2, "93223435", "28 Jalan Alamak S680234", TestConstants.u1_USERNAME, "password"};
        Response userInfo = createUser(createUserRequestBody(user, true));
        assertEquals(409, userInfo.getStatusCode());
    }
    
    /**
     * Test update info by user1.
     * @throws Exception
     */
    @Test
    @Order(5)
    public void testUpdateUser_Success() throws Exception{
        // only phone, address and password - update to other fields should be ignored
        String[] user = {"John Tan", "S5042165A", "99992222", "1 Jalan Alamak S680234", TestConstants.u1_USERNAME, "newpassword"};
        Response userInfo = updateUser(TestConstants.user_id_1, createUserRequestBody(user, true), TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
        assertUser(user, userInfo);
                
        // view by this user with new password - successful
        userInfo = getUser(TestConstants.user_id_1, TestConstants.u1_USERNAME, "newpassword");
        assertEquals(200, userInfo.getStatusCode());
        assertUser(user, userInfo);

        // update back to previous password
        String[] previous = {"John Tan", "S5042165A", "99992222", "1 Jalan Alamak S680234", TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD};
        userInfo = updateUser(TestConstants.user_id_1, createUserRequestBody(previous, true), TestConstants.u1_USERNAME, "newpassword");
        assertEquals(200, userInfo.getStatusCode());
        assertUser(user, userInfo);

        // 401 returned when using the old password
        userInfo = getUser(TestConstants.user_id_1, TestConstants.u1_USERNAME, "newpassword");
        assertEquals(401, userInfo.getStatusCode());

        // view by this user with new password - successful
        userInfo = getUser(TestConstants.user_id_1, TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
    }

    /**
     * Test deactivate user2 by manager.
     */
    @Test
    @Order(6)
    public void testDeactivateUser_Success() throws Exception{
        String[] user = {"John Tan", nric2, "93223435", "28 Jalan Alamak S680234", TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD};
        Response userInfo = updateUser(TestConstants.user_id_2, createUserRequestBody(user, false), TestConstants.m_USERNAME, TestConstants.m_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
        assertEquals(false, userInfo.jsonPath().getBoolean("active"));        

        // view by this user - 401
        userInfo = getUser(TestConstants.user_id_2, TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD);
        assertEquals(401, userInfo.getStatusCode());
        
        // reactivate the user
        userInfo = updateUser(TestConstants.user_id_2, createUserRequestBody(user, true), TestConstants.m_USERNAME, TestConstants.m_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
        assertEquals(true, userInfo.jsonPath().getBoolean("active"));        

        // view by this user - okay now
        userInfo = getUser(TestConstants.user_id_2, TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD);
        assertEquals(200, userInfo.getStatusCode());
    }

    /**
     * Analysts can't update user.
     * @throws Exception
     */
    @Test
    @Order(7)
    public void testAddUser_Unauthorized() throws Exception{
        String[] user = {"John Tan", "S5042165A", "99992222", "1 Jalan Alamak S680234", TestConstants.u1_USERNAME, "newpassword"};
        Response userInfo = updateUser(TestConstants.user_id_1, createUserRequestBody(user, true), TestConstants.a1_USERNAME, TestConstants.a1_PASSWORD);
        assertEquals(403, userInfo.getStatusCode());
    }
}

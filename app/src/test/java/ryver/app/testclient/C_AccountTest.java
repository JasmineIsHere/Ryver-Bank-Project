package ryver.app.testclient;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

import io.restassured.RestAssured;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import io.restassured.response.Response;
import net.minidev.json.JSONObject;

import static io.restassured.config.RedirectConfig.redirectConfig;

import static io.restassured.RestAssured.*;

@TestMethodOrder(OrderAnnotation.class)
public class C_AccountTest {

    /**
     *  All numbers are double except id (int).

     * Account info:
        {
            "id": (auto-generated by your api),
            "customer_id": 1234,
            "balance": 50000.0,
            "available_balance": 10000.0, (fund can be on-hold due to pending trades)
        }
 
     * Transfer transaction info:
        {
            "id": (auto-generated by your api),
            "from": (sender_account_id),
            "to": (receiver_account_id),
            "amount": 5000.0
        }
     * 
     */
    private String createTransactionRequestBody(double amount, int from, int to){
        JSONObject requestParams = new JSONObject();
        requestParams.put("from", from);
        requestParams.put("to", to);
        // amount has to be > 0, otherwise it is a bad request (status 400)
        requestParams.put("amount", amount);
        return requestParams.toJSONString();
    }
    private Response createTransaction(String request, String username, String password, int id){
        return given().auth().basic(username, password)
                .accept("*/*").contentType("application/json").body(request)
                .post(TestConstants.accountURL + "/" + id + "/transactions")
                .then().extract().response();
    }
    private String createAccountRequestBody(int id, double balance){
        JSONObject requestParams = new JSONObject();
        // each user can have different accounts
        requestParams.put("customer_id", id);
        requestParams.put("balance", balance);
        return requestParams.toJSONString();
    }
    private Response createAccount(String request){
        return given().auth().basic(TestConstants.m_USERNAME, TestConstants.m_PASSWORD)
                .accept("*/*").contentType("application/json")
                .body(request).post(TestConstants.accountURL)
                .then().extract().response();
    }
    private Response getAccount(String username, String password, int id){
        return given().auth().basic(username, password)
                .accept("*/*").contentType("application/json")
                .get(TestConstants.accountURL + "/" + id)
                .then().extract().response();
    }

    @BeforeAll
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }

    /**
     * Test account creation
     * @throws Exception
     */
    @Test
    @Order(1)
    public void testAddAccount_Success() throws Exception{
        // the available-balance will be computed by the tested API so we do not specify it here
        Response response = createAccount(createAccountRequestBody(TestConstants.user_id_1, TestConstants.account_balance_1));
        assertEquals(201, response.getStatusCode());
        
        // Get newly created account id
        int id = response.jsonPath().getInt("id");
        TestConstants.account_id_1 = id;
        
        // unsuccessful view due to no authentication - 401
        response = getAccount("", "", id);
        assertEquals(401, response.getStatusCode());

        // view by analyst - forbidden 403
        response = getAccount(TestConstants.a1_USERNAME, TestConstants.a1_PASSWORD, id);
        assertEquals(403, response.getStatusCode());

        // view by this user - successful
        response = getAccount(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD, id);
        assertEquals(200, response.getStatusCode());
        assertEquals(TestConstants.account_balance_1, response.jsonPath().getDouble("balance"));
    }

    /**
     * Test account creation: invalid data, return 400 - Bad Request
     * @throws Exception
     */
    @Test
    @Order(2)
    public void testAddAccount_InvalidUser() throws Exception{
        // invalid customer id (does not exist)
        Response response = createAccount(createAccountRequestBody(987650, 50000.0));
        assertEquals(400, response.getStatusCode());
    }

    /**
     * Test transfer funds - success
     * If invalid parameters specified for the transfer - return 400 Bad Request
     * Transfer by posting to URL: accountURL + "/{accountId}/transactions"
     */
    @Test
    @Order(3)
    public void testTransfer_Success() throws Exception{
        // First, create a new acccount for user2
        Response response = createAccount(createAccountRequestBody(TestConstants.user_id_2, TestConstants.account_balance_2));
        assertEquals(201, response.getStatusCode());
        
        // Get newly created account id
        int id = response.jsonPath().getInt("id");
        TestConstants.account_id_2 = id;
        
        // transfer from account of user1 to account of user2
        // amount has to be > 0, otherwise it is a bad request (status 400)
        double amount = 10000.0;
        response = createTransaction(createTransactionRequestBody(amount, TestConstants.account_id_1, TestConstants.account_id_2), 
                TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD, TestConstants.account_id_1);
        
        // check balance of user1's account
        response = getAccount(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD, TestConstants.account_id_1);
        assertEquals(TestConstants.account_balance_1 - amount, response.jsonPath().getDouble("balance"));

        // check balance of user2's acount
        response = getAccount(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD, TestConstants.account_id_2);
        assertEquals(TestConstants.account_balance_2 + amount, response.jsonPath().getDouble("balance"));
        
        // transfer back the same amount from account 2 to account 1
        response = createTransaction(createTransactionRequestBody(amount, TestConstants.account_id_2, TestConstants.account_id_1), 
                TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD, TestConstants.account_id_2);
        
        // check balance of user1's account
        response = getAccount(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD, TestConstants.account_id_1);
        assertEquals(TestConstants.account_balance_1, response.jsonPath().getDouble("balance"));

        // check balance of user2's acount
        response = getAccount(TestConstants.u2_USERNAME, TestConstants.u2_PASSWORD, TestConstants.account_id_2);
        assertEquals(TestConstants.account_balance_2, response.jsonPath().getDouble("balance"));
    }

    /**
     * Test transfer funds - 400 Bad request
     * Wrong accountid, or transfer amount > available_balance.
     */
    @Test
    @Order(4)
    public void testTransfer_InvalidAmount() throws Exception{
        // transfer from account 1 to account 2
        Response response = createTransaction(createTransactionRequestBody(10000000.0, TestConstants.account_id_1, TestConstants.account_id_2), 
                TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD, TestConstants.account_id_1);
        assertEquals(400, response.getStatusCode());
    }

    @Test
    @Order(5)
    public void testTransfer_Unauthorized() throws Exception{
        // transfer from account 2 with user1's credentials
        Response response = createTransaction(createTransactionRequestBody(1000.0, TestConstants.account_id_2, TestConstants.account_id_1), 
                TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD, TestConstants.account_id_2);
        assertEquals(403, response.getStatusCode());
    }

    /**
     * Test view all transactions
     */
    @Test
    @Order(6)
    public void testViewTransactions_ReturnJson() throws Exception{
        Response response = given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
                .accept("*/*").contentType("application/json")
                .get(TestConstants.accountURL + "/" + TestConstants.account_id_1 + "/transactions")
                .then().statusCode(200).extract().response();
        
        int size = response.jsonPath().getList("id").size();
        // 2 transactions so far for user 1 - one transferring and one receiving fund
        assertEquals(2, size);
    }
}

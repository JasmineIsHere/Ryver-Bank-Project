// package ryver.app.proftests;

// import org.junit.jupiter.api.BeforeAll;
// import org.junit.jupiter.api.Order;
// import org.junit.jupiter.api.Test;
// import org.junit.jupiter.api.TestMethodOrder;
// import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

// import io.restassured.RestAssured;
// import io.restassured.config.JsonConfig;
// import io.restassured.path.json.config.JsonPathConfig;
// import io.restassured.response.Response;
// import net.minidev.json.JSONObject;

// import static org.hamcrest.Matchers.*;
// import static org.junit.jupiter.api.Assertions.assertEquals;

// import java.util.List;

// import static io.restassured.config.RedirectConfig.redirectConfig;

// import static io.restassured.RestAssured.*;

// @TestMethodOrder(OrderAnnotation.class)
// public class D_TradeTest {

//    /**
//      * Endpoint: baseURL + "/trades"
//      * All numbers are double except quantity/volume (int) and timestamp (long).
//      * 
//      * Trade info:
//         {
//             "id": (auto-generated by your api),
//             "action":"buy", (specify "sell" for selling)
//             "symbol":"A17U",
//             "quantity":1000, (in multiples of 100)
//             "bid":3.28, (specify 0.0 for market order, ignored if action is "sell")
//             "ask":3.27, (specify 0.0 for market order, ignored if action is "buy")
//             "avg_price":3.30 (the average filled price, as one trade can be matched by several other trades)
//             "filled_quantity":0;
//             "date": (submitted time in Unix timestamp, expired after 5pm of the day),
//             "account_id":1234, (account to debit or to deposit fund)
//             "customer_id":1234, (submitter of the trade)
//             "status":"open" (or "filled", "partial-filled", "cancelled", "expired")
//         }
//      */
//     private String stockToTrade = "A17U";
    
//     @BeforeAll
//     public static void initClass() {
//         RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
//         RestAssured.useRelaxedHTTPSValidation();
//         RestAssured.urlEncodingEnabled = false;
//         RestAssured.config = RestAssured.config()
//             .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
//             .redirect(redirectConfig().followRedirects(false));
//     }

//     /**
//      * Test buying at market price - filled right away.
//      * If buying but having insufficient balance (contra trading) - return 400 Bad Request
//      * Your API should initialize the bid/ask volumes of each stock to 20000 at the start
//      * @throws Exception
//      */
//     @Test
//     @Order(1)
//     public void testBuy_Valid_ReturnJson() throws Exception{
//         // get asking price
//         double ask_price = 
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.stockURL + "/" + stockToTrade)
//                 .then()
//                 .statusCode(200)
//                 .body(containsString(stockToTrade))
//                 .extract().path("ask");

//         // create buy trade (market order) which is filled immediately
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("action", "buy");
//         requestParams.put("symbol", stockToTrade);
//         requestParams.put("quantity", TestConstants.buyQuantity);
//         requestParams.put("bid", 0); // market order
//         requestParams.put("account_id", TestConstants.account_id_1);
//         requestParams.put("customer_id", TestConstants.user_id_1);

//         double avg_price = 
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.tradeURL)
//                 .then()
//                 .statusCode(201)
//                 .body("status", equalTo("filled"))
//                 .body("avg_price", equalTo(ask_price))
//                 .extract().path("avg_price");
        
//         // check balance of account
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 - avg_price*TestConstants.buyQuantity));

//         // check portfolio
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.portfolioURL)
//                 .then()
//                 .statusCode(200)
//                 .body(containsString(stockToTrade));
//     }
    
//     /**
//      * Test partial-filled trade, due to insufficient volume.
//      */
//     @Test
//     @Order(2)
//     public void testPartialFilled_Valid_ReturnJson() throws Exception{
//         // get stock info
//         int volume = 
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.stockURL + "/" + stockToTrade)
//                 .then()
//                 .statusCode(200)
//                 .body(containsString(stockToTrade))
//                 .extract().path("ask_volume");
//         // create a large buy trade, more than available ask_volume
//         int quantity = 2 * volume;
//         JSONObject requestParams = new JSONObject();
//         requestParams.put("action", "buy");
//         requestParams.put("symbol", stockToTrade);
//         requestParams.put("quantity", quantity);
//         requestParams.put("bid", 0); // market order
//         requestParams.put("account_id", TestConstants.account_id_1);
//         requestParams.put("customer_id", TestConstants.user_id_1);

//         Response res = 
//                 given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .body(requestParams.toJSONString())
//                 .post(TestConstants.tradeURL)
//                 .then()
//                 .statusCode(201)
//                 .body("status", equalTo("partial-filled"))
//                 .extract().response();
//         double avg_price = res.jsonPath().getDouble("avg_price");
//         int filled_quantity = res.jsonPath().getInt("filled_quantity");

//         // check filled quantity vs available volume
//         assertEquals(volume, filled_quantity);

//         // update the bought quantity so far
//         TestConstants.buyQuantity = TestConstants.buyQuantity + filled_quantity;
        
//         // check balance of account 1
//         given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.accountURL + "/" + TestConstants.account_id_1)
//                 .then()
//                 .statusCode(200)
//                 .contentType("application/json")
//                 .body("balance", equalTo(TestConstants.account_balance_1 - avg_price*TestConstants.buyQuantity));

//     }

//     /**
//      * Test portfolio after buying/selling
//      * All numbers are in double, excep quantity (int) or id (int).
//         For ROLE_USER only.
//         {
//                 "customer_id": 123456,
//                 "assests": [
//                 {
//                     "code":"A17U",
//                     "quantity":1000,
//                     "avg_price": 3.30,
//                     "current_price":3.31,
//                     "value":3310.0,
//                     "gain_loss":10.0
//                 },
//                 {
//                     "code":"Z74",
//                     "avg_price": 2.30,
//                     "quantity":2000,
//                     "current_price":2.27,
//                     "value":4540.0,
//                     "gain_loss":-60.0
//                 }
//             ],
//             "unrealized_gain_loss":-50.0 (for stocks currently owned),
//             "total_gain_loss":500.0 (for all the trades made so far)
//      * 
//      * @throws Exception
//      */
//     @Test
//     @Order(3)
//     public void testPortfolio_ReturnJson() throws Exception{
//         // get portfolio info
//         Response res = 
//                 given().auth().basic(TestConstants.u1_USERNAME, TestConstants.u1_PASSWORD)
//                 .accept("*/*")
//                 .contentType("application/json")
//                 .get(TestConstants.portfolioURL)
//                 .then()
//                 .statusCode(200).extract().response();

//         List<String> stocks = res.jsonPath().getList("assets.code");
//         List<Integer> quantities = res.jsonPath().getList("assets.quantity");
//         assertEquals("A17U", stocks.get(0));
//         // check buy_quantity is correct
//         assertEquals(TestConstants.buyQuantity, quantities.get(0));
//     }

//     // Other methods testing for selling/buying, open, cancelled and partial-filled orders, etc.
//     // Short selling or buying with insufficient balance will result in 400 - Bad Request.
//     // More methods to test for profit and loss calculation.

// }

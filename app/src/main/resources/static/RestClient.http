################### Start User (Customer) Testing #############################################
# In the beginning there is a test customer
GET http://localhost:8080/customers
Accept: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can view list of all customers

###
# A manager can create a new customer
# Param: customer's data
# Returns: 201 Created with customer details
# Create customer 1
POST http://localhost:8080/customers
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can add new customers

{
    "username": "good_user_1",
    "password": "01_user_01",
    "authorities": "ROLE_USER",
    "fullName": "User One",
    "nric": "S9942296C",
    "phone": "90123456",
    "address": "999 Tampines Road S999999",
    "active": false
}

###
# A customer cannot create a new customer
# Param: customer's data
# Returns: 403 Forbidden
POST http://localhost:8080/customers
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01
# Validation fail - Customer cannot add new customers

{
    "username": "good_user_2",
    "password": "02_user_02",
    "authorities": "ROLE_USER",
    "fullName": "User Two",
    "nric": "T0046822Z",
    "phone": "92123262",
    "address": "222 Paya Lebar Road S222222",
    "active": true
}

###
# A manager can create a new customer
# Param: customer's data
# Returns: 201 Created with customer details
# Create customer 2
POST http://localhost:8080/customers
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can add new customers

{
    "username": "good_user_2",
    "password": "02_user_02",
    "authorities": "ROLE_USER",
    "fullName": "User Two",
    "nric": "T0046822Z",
    "phone": "92123262",
    "address": "222 Paya Lebar Road S222222",
    "active": true
}

###
# A manager can modify certain details
# Param: updated customer's data (change address and phone)
# 999 Tampines Road to 111 Tampines Road
# 90123456 to 9111111
# active false to true
# Returns: 200 OK with updated customer details
PUT http://localhost:8080/customers/4
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01

{
    "username": "Cant Update",
    "password": "01_user_01",
    "authorities": "ROLE_USER",
    "fullName": "Cant Update",
    "nric": "S9111111B",
    "phone": "91111111",
    "address": "111 Tampines Road S111111",
    "active": true
}

###
# A customer can modify his own details
# Param: updated customer's data (change address and phone)
# 111 Tamp Road to 222 Tamp Road
# 9111111 to 92222222
# Returns: 200 OK with updated customer details
PUT http://localhost:8080/customers/4
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "username": "Cant Update",
    "password": "01_user_01",
    "authorities": "ROLE_USER",
    "fullName": "Cant Update",
    "nric": "S9111111B",
    "phone": "92222222",
    "address": "222 Tampines Road S222222",
    "active": true
}

###
# a invalid manager cannot get the list of customers
# Returns: 401 Unauthorized
GET http://localhost:8080/customers
Accept: application/json
Authorization: Basic bad_manager 01_manager_01

###
# a customer cannot get the list of customers
# Returns: 403 Forbidden
GET http://localhost:8080/customers
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation fail - Customers cannot view list of all customers

###
# we now have 2 customers as shown here
GET http://localhost:8080/customers
Accept: application/json
Authorization: Basic manager_1 01_manager_01

###

################### End User (Customer) Testing ##############################################


################### Begin Accounts Testing ###################################### 
# In the beginning there is no account
# Returns: 200 OK with 1 test account
GET http://localhost:8080/accounts
Accept: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can view list of all accounts of customer

###
# a invalid manager cannot get the list of account
# Returns: 401 Unauthorized
GET http://localhost:8080/accounts
Accept: application/json
Authorization: Basic non_existing_manager_1 01_manager_01


###
# A manager can create a new Account
# Param: customerId, balance and availBalance
# Returns: 201 Created with new acc detail
# Create new account for customer 1
POST http://localhost:8080/accounts
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can create new accounts

{
    "customer_id": 4,
    "balance": 1000000.0,
    "available_balance": 1000000.0
}

###
# A manager can create a new Account
# Param: customerId, balance and availBalance
# Returns: 201 Created with new acc detail
# Create new account for customer 2
POST http://localhost:8080/accounts
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can create new accounts

{
    "customer_id": 5,
    "balance": 5000000.0,
    "available_balance": 5000000.0
}

###
# we now have 3 accounts, 1 each for test customer, customer 1 and customer 2
# Returns: 200 OK all account info
GET http://localhost:8080/accounts
Accept: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can view list of all accounts of customer

###
# A customer can only view his own accounts
# Returns: 200 OK all account info for the authorized customer
GET http://localhost:8080/accounts
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation pass - Customer can view all their OWN accounts

###
# A customer can view his own accounts
# Returns: 200 OK with all account info for the authorized customer
GET http://localhost:8080/accounts/2
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation pass - Customer can view their OWN specific account using accountId

###
# A customer cannot view another customer's account
# Returns: 403 Forbidden 
# Note: Account 2 belongs to customer 2
GET http://localhost:8080/accounts/3
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation fail - Customer cannot view other people's accounts


###
# A customer cannot modify his own account
# Return 405 Method not allowed
PUT http://localhost:8080/accounts/2
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "customer_id": 3,
    "balance": 300.0,
    "available_balance": 300.0
}

###
# A customer cannot modify others account
# Return 405 Method not allowed
PUT http://localhost:8080/accounts/3
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "customer_id": 3,
    "balance": 10000.0,
    "available_balance": 10000.0
}

###
# A manager cannot modify any account
# Return 405 Method not allowed
PUT http://localhost:8080/accounts/1
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01

{
    "customer_id": 3,
    "balance": 300.0,
    "available_balance": 300.0
}
###

################ End Account Testing #############################################


################ Begin Transaction Testing #######################################

# A customer can make transaction if he have sufficient value
# customer 1 has 100 bucks
# Param: sender Account Id, Receiver Account Id, Value to transfer
# Returns: 200 OK with transaction details
POST http://localhost:8080/accounts/1/transactions
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "from": 2,
    "to": 3,
    "amount": 2.0
}

###
# Check customer 1 account 1 now have 98 bucks
GET http://localhost:8080/accounts/2
Accept: application/json
Authorization: Basic good_user_1 01_user_01

###
# A customer cannot make transaction if he have insufficient value
# Customer 1 now have 98 bucks
# Param: sender Account Id, Receiver Account Id, Value to transfer
# Returns: 400 Bad Request Insufficient Balance in account
POST http://localhost:8080/accounts/2/transactions
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "from": 2,
    "to": 3,
    "amount": 1234567.0
}

###
# A customer cannot make transaction if the receiver account does not exist
# Account 3 does not exist
# Param: sender Account Id, Receiver Account Id, Value to transfer
# Returns: 404 Resource not found: Could not find account 3
POST http://localhost:8080/accounts/2/transactions
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "from": 2,
    "to": 4,
    "amount": 1234567.0
}

###
# A customer can view his own transaction 
# Returns: 200 OK with list of transaction
# where customer is sender
GET http://localhost:8080/accounts/2/transactions
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation pass - Customers can view own account's transactions

###
# A customer can view his own transaction 
# Returns: 200 OK with list of transaction
# where customer is receiver
GET http://localhost:8080/accounts/3/transactions
Accept: application/json
Authorization: Basic good_user_2 02_user_02
# Validation pass - Customers can view own account's transactions



####################### End Transaction Testing #################################


####################### Begin Content Testing ###################################

###
# A customer cannot add new contents
# Returns: 403 Forbidden 
POST http://localhost:8080/content
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01
# Validation fail - Customers cannot add new content

{
    "title":"The title of the advisory or news",
    "summary":"The short summary of the content item",
    "content": "The text of the content item",
    "link":"https://link.to.externalcontent"

}

###
# An Analyst can add new contents
# Param: Title, Summary, Content and Link
# Returns: 201 Created with approved = false 
POST http://localhost:8080/content
Content-Type: application/json
Authorization: Basic analyst_1 01_analyst_01

{
    "title":"The title of the advisory or news",
    "summary":"The short summary of the content item",
    "content": "The text of the content item",
    "link":"https://link.to.externalcontent"
}

###
# A Manager can add new contents
# Param: Title, Summary, Content and Link
# Returns: 201 Created with approved = false
POST http://localhost:8080/content
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01
# Validation pass - Valid managers can add new content

{
    "title":"The title of the advisory or news",
    "summary":"The short summary of the content item",
    "content": "The text of the content item",
    "link":"https://link.to.externalcontent"

}


###
# A customer can only view approved contents
# Returns: 200 OK with empty list
# note: there is 2 article both of which has yet to be approved
GET http://localhost:8080/content
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation pass - Customers can view only approved content

###
# An analyst can view all contents
# Returns: 200 OK with list of all contents
# note: there is 2 article both of which has yet to be approved
GET http://localhost:8080/content
Accept: application/json
Authorization: Basic analyst_1 01_analyst_01
#Validation pass - Analysts can view all content

###
# A manager can view approved contents
# Returns: 200 OK with list of all contents
# note: there is 2 article both of which has yet to be approved
GET http://localhost:8080/content
Accept: application/json
Authorization: Basic manager_1 01_manager_01


###
# A customer cannot update contents 
# Returns: 403 Forbidden 
# note: Content 1 exists
PUT http://localhost:8080/content/1
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "title":"Title Not Updated",
    "summary":"Summary Not Updated",
    "content": "Goodbye",
    "link":"https://google.com",
    "approved": true
}

###
# An analyst can update everything but approving content
# Returns: 200 OK with all changes made except approve = true
PUT http://localhost:8080/content/1
Content-Type: application/json
Authorization: Basic analyst_1 01_analyst_01

{
    "title":"Title Changed",
    "summary":"Summary Changed",
    "content": "Hello",
    "link":"https://google.com",
    "approved": true
}

###
# A Manager can update everything including approving content
# Returns: 200 OK with all changes made including approve = true
PUT http://localhost:8080/content/1
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01

{
    "title":"Title Changed Again",
    "summary":"Summary Changed Again",
    "content": "Hello Again",
    "link":"http://nooooooooooooooo.com",
    "approved": true
}


###
# A customer cannot delete content
# Returns: 403 Forbidden
DELETE http://localhost:8080/content/1
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01
# Validation fail - Customers cannot delete content

###
# An Analyst can delete content
# Returns: 200 OK
DELETE http://localhost:8080/content/1
Content-Type: application/json
Authorization: Basic analyst_1 01_analyst_01

###
# A Manager can delete content
# Returns: 200 OK
DELETE http://localhost:8080/content/2
Content-Type: application/json
Authorization: Basic manager_1 01_manager_01

###
# A manager can view approved contents
# Returns: 200 OK with empty list
# note: all contents has been successfully deleted
GET http://localhost:8080/content
Accept: application/json
Authorization: Basic manager_1 01_manager_01


################### End Content Testing #########################################


################### Begin Stock Testing #########################################


###
# A manager can view a list of STI stock
# Returns: 200 OK list of all STI stock 
# note: components of STI as of 12 October 2020
GET http://localhost:8080/stocks
Accept: application/json
Authorization: Basic manager_1 01_manager_01

###
# A manager can view a Single stock
# Returns: 200 OK with a17u stock 
GET http://localhost:8080/stocks/A17U
Accept: application/json
Authorization: Basic manager_1 01_manager_01

###
# A customer can view a list of STI stock
# Returns: 200 OK list of all STI stock 
# note: components of STI as of 12 October 2020
# note: Authentication is required to prevent excessive stress I.e. no permit all
GET http://localhost:8080/stocks
Accept: application/json
Authorization: Basic good_user_1 01_user_01

###
# A customer can view a Single stock
# Returns: 200 OK with a17u stock
# note: Authentication is required to prevent excessive stress I.e. no permit all
GET http://localhost:8080/stocks/A17U
Accept: application/json
Authorization: Basic good_user_1 01_user_01

################### End Stock Testing #########################################

################### Start Trade Testing #########################################

###

# A customer can buy stocks
# NEED CHANGE TO ACCOUNT_ID
# NEED CHANGE TO CUSTOMER_ID
POST http://localhost:8080/trades
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "action": "buy", 
    "symbol": "A17U", 
    "quantity": 12000, 
    "bid": 0,
    "ask": 0.0, 
    "accountId": 2, 
    "customerId": 4
}

###

# A customer can buy stocks
# NEED CHANGE TO ACCOUNT_ID
# NEED CHANGE TO CUSTOMER_ID
POST http://localhost:8080/trades
Content-Type: application/json
Authorization: Basic good_user_2 02_user_02

{
    "action": "buy", 
    "symbol": "A17U", 
    "quantity": 6000, 
    "bid": 0.0,
    "ask": 0.0, 
    "accountId": 3,
    "customerId": 5
}

###
# customer can sell his stocks if he has it in his portfolio
POST http://localhost:8080/trades
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    "action": "sell", 
    "symbol": "A17U", 
    "quantity": 1000, 
    "bid": 0.0,
    "ask": 1, 
    "accountId": 2, 
    "customerId": 4
}

###
// CREATED FOR TESTING. NOT NEEDED FOR SUBMISSION
GET http://localhost:8080/trades
Accept: application/json
Authorization: Basic good_user_1 01_user_01

###
// CREATED FOR TESTING. NOT NEEDED FOR SUBMISSION
GET http://localhost:8080/trades
Accept: application/json
Authorization: Basic testuser_01 01_testuser_01


###
# A customer can view his own specific trade
GET http://localhost:8080/trades/89
Accept: application/json
Authorization: Basic good_user_1 01_user_01

###

# A customer cancel a trade (status) if the trade is still open, other fields will be ignored
PUT http://localhost:8080/trades/89
Content-Type: application/json
Authorization: Basic good_user_1 01_user_01

{
    
    "action": "buy",
    "symbol": "A17U",
    "quantity": 1000, 
    "bid": 3.28,
    "ask": 3.27, 
    "status":"cancelled",
    "accountId": 2, 
    "customerId": 4

}

###
# A customer can check his own account after the cancellation of stocks
# Returns: 200 OK all account info for the authorized customer
GET http://localhost:8080/accounts
Accept: application/json
Authorization: Basic good_user_1 01_user_01
# Validation pass - Customer can view all their OWN accounts


################### End Trade Testing #########################################


################### Begin Portfolio Testing #########################################

###
# # A customer can view their own portfolio
# # Returns: 200 OK
# GET http://localhost:8080/portfolio/4
# Accept: application/json
# Authorization: Basic good_user_1 01_user_01

###
# A customer can view their own portfolio
# Returns: 200 OK
GET http://localhost:8080/portfolio
Accept: application/json
Authorization: Basic good_user_1 01_user_01

################### End Portfolio Testing #########################################